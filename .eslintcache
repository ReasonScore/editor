[{"C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\index.tsx":"1","C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\serviceWorker.ts":"2","C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\App.tsx":"3","C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\Menu.tsx":"4","C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\selectElement.ts":"5","C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\ScoreElement.tsx":"6","C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\dataModels\\Claim.ts":"7","C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\EditorElement.tsx":"8","C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\dataModels\\ClaimEdge.ts":"9"},{"size":5132,"mtime":1611091521165,"results":"10","hashOfConfig":"11"},{"size":5344,"mtime":1582472021065,"results":"12","hashOfConfig":"11"},{"size":613,"mtime":1589316737840,"results":"13","hashOfConfig":"11"},{"size":13878,"mtime":1612707492555,"results":"14","hashOfConfig":"11"},{"size":1241,"mtime":1589922211670,"results":"15","hashOfConfig":"11"},{"size":15611,"mtime":1591539700997,"results":"16","hashOfConfig":"11"},{"size":635,"mtime":1588275271030,"results":"17","hashOfConfig":"11"},{"size":12908,"mtime":1598802592435,"results":"18","hashOfConfig":"11"},{"size":1521,"mtime":1588275271031,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1inllgy",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\index.tsx",[],["40","41"],"C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\serviceWorker.ts",[],"C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\App.tsx",[],"C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\Menu.tsx",[],"C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\selectElement.ts",[],"C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\ScoreElement.tsx",["42"],"import React from 'react';\r\nimport { RepositoryLocalPure, Score, Messenger, Action, ScoreTree } from \"@reasonscore/core\";\r\nimport EditorElement from './EditorElement';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { ClaimEdge } from './dataModels/ClaimEdge';\r\nimport { Claim } from './dataModels/Claim';\r\nimport { selectElement } from './selectElement';\r\n\r\nconst commonmark: any = require('commonmark');\r\n\r\ntype MyProps = {\r\n    scoreId: string,\r\n    repository: RepositoryLocalPure,\r\n    proMainContext: boolean,\r\n    messenger: Messenger,\r\n    settings: any,\r\n    scoreTree: ScoreTree,\r\n};\r\n\r\ntype MyState = {\r\n    childrenVisible: boolean,\r\n    editorVisible: boolean,\r\n    addMode: boolean,\r\n    score: Score,\r\n    claim: Claim,\r\n    childScores: Score[],\r\n    claimEdge?: ClaimEdge,\r\n};\r\n\r\nclass ScoreElement extends React.Component<MyProps, MyState> {\r\n\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            childrenVisible: false,\r\n            editorVisible: false,\r\n            addMode: false,\r\n            score: new Score(\"\", \"\"),\r\n            claim: new Claim(),\r\n            childScores: [],\r\n            claimEdge: undefined,\r\n        };\r\n        this.state.score.confidence = .5;\r\n\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const score = await this.props.repository.getScore(this.props.scoreId) as Score;\r\n        let claim = new Claim() as Claim;\r\n        if (score) {\r\n            let claimEdge: ClaimEdge | undefined;\r\n            if (score.sourceEdgeId) {\r\n                claimEdge = await this.props.repository.getClaimEdge(score.sourceEdgeId) as ClaimEdge\r\n            }\r\n            const claimResult = await this.props.repository.getClaim(score.sourceClaimId);\r\n            const childScores = await this.props.repository.getChildrenByScoreId(score.id) as Score[];\r\n            if (claimResult) {\r\n                claim = claimResult as Claim;\r\n            }\r\n            this.setState({\r\n                score: score,\r\n                claim: claim,\r\n                childScores: childScores,\r\n                claimEdge: claimEdge\r\n            });\r\n        }\r\n        this.props.messenger.subscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    handleChildrenVisible = () => {\r\n        selectElement(this.state.score.id, this.props.repository.rsData, this.props.settings);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.messenger.unsubscribe(this.handleDataDispatch)\r\n    }\r\n\r\n    handleDataDispatch = async (actions: Action[]) => {\r\n        for (const change of actions) {\r\n            const { newData, type, dataId, oldData } = change;\r\n            let newState: any = {}\r\n            if (type === \"modify_claim\" && dataId === this.state.claim.id) {\r\n                newState.claim = { ...this.state.claim, ...newData };\r\n            }\r\n\r\n            if (type === \"modify_claimEdge\" && this.state.claimEdge && dataId === this.state.claimEdge.id) {\r\n                newState.claimEdge = { ...this.state.claimEdge, ...newData };\r\n            }\r\n\r\n            if (type === \"delete_claimEdge\" && oldData.parentId === this.state.claim.id) {\r\n                newState.childScores = await this.props.repository.getChildrenByScoreId(this.state.score.id);\r\n            }\r\n\r\n            if (type === \"modify_score\" && dataId === this.state.score.id) {\r\n                newState.score = { ...this.state.score, ...newData };\r\n            }\r\n\r\n            if (type === \"add_score\" && newData.parentScoreId === this.state.score.id) {\r\n                if (this.state.childrenVisible === false) {\r\n                    newState.childrenVisible = true;\r\n                }\r\n                const childScores = await this.props.repository.getChildrenByScoreId(this.state.score.id);\r\n                newState.childScores = childScores;\r\n            }\r\n\r\n            this.setState(newState);\r\n        }\r\n    }\r\n\r\n    handleEditButtonClick = () => {\r\n        this.setState({\r\n            editorVisible: !this.state.editorVisible,\r\n            addMode: false,\r\n        });\r\n    }\r\n\r\n    handleAddButtonClick = () => {\r\n        this.setState({\r\n            addMode: true,\r\n            editorVisible: !this.state.editorVisible\r\n        });\r\n    }\r\n\r\n    handleEditClose = () => {\r\n        this.setState({\r\n            editorVisible: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const props = this.props;\r\n        let score = this.state.score;\r\n        const claim = this.state.claim;\r\n        const childScores = this.state.childScores;\r\n        let proMain = props.proMainContext;\r\n        let scoreNumbers = `${Math.round(score.confidence * 100)}%`\r\n        const settings = this.props.settings;\r\n\r\n        //Score Numbers\r\n        let scoreImpact = score.confidence;\r\n        if (score) {\r\n            if (!score.pro) {\r\n                proMain = !proMain;\r\n            }\r\n            if (!claim.reversible && score.confidence < 0) {\r\n                scoreImpact = 0;\r\n            }\r\n            if (score.affects === \"relevance\") {\r\n                scoreNumbers = score.pro ? \"X\" : \"รท\";\r\n                scoreNumbers += `${(score.relevance + 1).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 1 })}`;\r\n            } else {\r\n                scoreNumbers = `${Math.round(scoreImpact * score.relevance * 100)}`\r\n            }\r\n        }\r\n\r\n        //Score Description\r\n        let scoreDescription = \"\";\r\n        if (settings.scoreDescriptions) {\r\n            if (score.affects === \"relevance\") {\r\n                scoreDescription = \"Importance\";\r\n                if (score.pro) {\r\n                    scoreDescription = \"Increases \" + scoreDescription;\r\n                } else {\r\n                    scoreDescription = \"Decreases \" + scoreDescription;\r\n                }\r\n            } else {\r\n                let descriptions, trailing = \"\";\r\n                if (!score.parentScoreId) {\r\n                    descriptions = settings.scoreDescriptions.result\r\n                } else {\r\n                    descriptions = settings.scoreDescriptions.impact\r\n                    trailing = proMain ? \" Pro\" : \" Con\";\r\n                }\r\n                for (const descItem of descriptions) {\r\n                    if (score.confidence * score.relevance >= descItem.min) {\r\n                        scoreDescription = descItem.desc;\r\n                    }\r\n                }\r\n                scoreDescription += trailing + \": \";\r\n            }\r\n        }\r\n        if (!childScores.length) {\r\n            scoreDescription = \"Assumed \" + scoreDescription\r\n        }\r\n        let basedOn = \"\"\r\n        if (this.state.score.descendantCount > 0) {\r\n            basedOn = \" based on \" + this.state.score.descendantCount + \" claim\";\r\n            if (this.state.score.descendantCount > 1) basedOn += \"s\"\r\n            basedOn += \".\"\r\n        }\r\n\r\n        //Prioritize the children for the display order\r\n        //TODO: move score sorting to the repository to reduce duplicate processing\r\n        let childScoresSorted = childScores;\r\n        if (childScores.length > 1) {\r\n            childScoresSorted = childScores.sort((a, b) => {\r\n                if ((a.priority === undefined || a.priority === \"\") && (b.priority === undefined || b.priority === \"\")) {\r\n                    return 0;\r\n                }\r\n                if ((a.priority === undefined || a.priority === \"\")) {\r\n                    return 1;\r\n                }\r\n                if ((b.priority === undefined || b.priority === \"\")) {\r\n                    return -1;\r\n                }\r\n                if (a.priority > b.priority) {\r\n                    return 1;\r\n                }\r\n                if (a.priority < b.priority) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            });\r\n\r\n        }\r\n\r\n        const proMainText = proMain ? \"pro\" : \"con\";\r\n\r\n        let fractionalizedScore, sign;\r\n        let fractionalizedScoreNumber: number = 0;\r\n        if (score.affects === \"relevance\") {\r\n            fractionalizedScore = score.pro ? \"X\" : \"รท\";\r\n            fractionalizedScore += `${(score.relevance + 1).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 1 })}`;\r\n        } else {\r\n            fractionalizedScore = Math.abs(\r\n                ((score.fraction * 100) - ((1 - score.confidence) * score.fraction * 100))\r\n            ).toFixed(0);\r\n            fractionalizedScoreNumber = Math.abs(\r\n                ((score.fraction * 100) - ((1 - score.confidence) * score.fraction * 100))\r\n            );\r\n            if (fractionalizedScore === \"100\") fractionalizedScore = \"99\";\r\n            if (!score.parentScoreId) {\r\n                if (score.confidence < 0) sign = \"-\";\r\n                else sign = \" \";\r\n            } else {\r\n                sign = proMain ? \"+\" : \"-\";\r\n            }\r\n        }\r\n\r\n        function createMarkup() {\r\n            var reader = new commonmark.Parser({});\r\n            var writer = new commonmark.HtmlRenderer({ safe: true });\r\n            var parsed = reader.parse(claim.content);\r\n            var html: string = writer.render(parsed)\r\n            //Add target=\"_blank\"\r\n            html = html.replace(/href=\"/g, ' target=\"_blank\" rel=\"noopener noreferrer\"  href=\"');\r\n            // rel=\"noopener noreferrer\" due to security vulnerability https://www.jitbit.com/alexblog/256/\r\n            return { __html: html };\r\n        }\r\n\r\n        return (\r\n            <div className={'claim-outer'}>\r\n                <input id={\"expander2-\" + score.id} type=\"checkbox\" className=\"expander2\" onChange={this.handleChildrenVisible}></input>\r\n                <input id={\"expander3-\" + score.id} type=\"checkbox\" className=\"expander3\"></input>\r\n                <div className={'claim-hider'}>\r\n                    <div className={'claim ' + proMainText} >\r\n                        {childScores.length > 0 &&\r\n                            <div id={\"expander-\" + (this.state.score.id)} className={\"expander\" + (this.state.childrenVisible ? \" expanded\" : \" collapsed\")} >\r\n                                <svg width=\"20px\" height=\"20px\">\r\n                                    <use href=\"#expander\" />\r\n                                </svg>\r\n                            </div>\r\n                        }\r\n                        <div className={'claim-inner'}>\r\n                            <div className=\"lines\">\r\n                                <span className=\"min\" title={claim.labelMin}>{claim.labelMin}</span>\r\n                                <span className=\"mid\" title={claim.labelMid}>{claim.labelMid}</span>\r\n                                <span className=\"max\" title={claim.labelMax}>{claim.labelMax}</span>\r\n\r\n                                <div className=\"lines-inner\">\r\n                                    <svg className=\"lines-pointer\" style={{ left: (proMain ? (scoreImpact + 1) / 2 : 1 - (scoreImpact + 1) / 2) * 100 + \"%\" }} height=\"20\" width=\"20\" viewBox=\"0 0 10 10\">\r\n                                        <path d=\"M 9,3 C 9,6 6,5 5,10 4,5 1,6 1,3 1,1 3,0 5,0 7,0 9,1 9,3 Z\" />\r\n                                    </svg>\r\n                                    <div className=\"tic\" style={{ left: '0%' }}></div>\r\n                                    <div className=\"tic\" style={{ left: '33.3%' }}></div>\r\n                                    <div className=\"tic\" style={{ left: '66.6%' }}></div>\r\n                                    <div className=\"tic\" style={{ left: '100%' }}></div>\r\n                                </div>\r\n                            </div>\r\n                            <label htmlFor={\"expander2-\" + score.id} className={'numbers'}\r\n                                title={scoreDescription + basedOn}>\r\n                                <span className=\"number\">\r\n                                    <span className=\"sign\">{sign}</span>\r\n                                    {fractionalizedScore}\r\n                                </span>\r\n                                {!score.parentScoreId && \"%\"}\r\n                            </label>\r\n                            {/* {fractionalizedScoreNumber < 1 && \"(\" + \r\n                                    (score.percentOfWeight * 100).toFixed(0) + \"%) \"\r\n                                } */}\r\n                            <span className={'score-description'}\r\n                                title={scoreNumbers + '% confidence based on ' + basedOn}>\r\n                                {scoreDescription + basedOn}\r\n                            </span>\r\n                            <span className={'rs-content'} dangerouslySetInnerHTML={createMarkup()}></span>\r\n                            <label className=\"more-info\" htmlFor={\"expander2-\" + score.id} >\r\n                                More info&hellip;\r\n                            </label>\r\n                        </div>\r\n                        <svg className=\"callout\" width=\"30px\" height=\"30px\">\r\n                            <use href=\"#callout\" />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className=\"scoreInfo\">\r\n                    {scoreDescription + basedOn}\r\n                    <span className=\"editable\">\r\n                        <button onClick={this.handleEditButtonClick} className=\"btn-inline\" >edit this claim</button>\r\n                        <button onClick={this.handleAddButtonClick} className=\"btn-inline\" >add a pro or con</button></span>\r\n                </div>\r\n                <CSSTransition in={this.state.editorVisible} timeout={490} classNames=\"editor\">\r\n                    <div>\r\n                        {this.state.editorVisible &&\r\n                            <EditorElement\r\n                                claimId={claim.id}\r\n                                repository={props.repository}\r\n                                claimEdge={this.state.claimEdge}\r\n                                proMainContext={this.state.addMode ? proMain : props.proMainContext}\r\n                                handleEditClose={this.handleEditClose}\r\n                                messenger={props.messenger}\r\n                                new={this.state.addMode}\r\n                                scoreId={this.state.score.id}\r\n                            />\r\n                        }\r\n                    </div>\r\n                </CSSTransition>\r\n                <ul id={\"children-\" + (this.state.score.id)} className={'children ' + (this.state.childrenVisible ? '' : 'hide')}>\r\n                    <TransitionGroup component={null}>\r\n                        {childScores.length > 0 && childScoresSorted.map((child) => (\r\n                            <CSSTransition\r\n                                key={child.id}\r\n                                timeout={5000}\r\n                                classNames='score'>\r\n                                <li key={child.id}>\r\n                                    <ScoreElement\r\n                                        scoreId={child.id}\r\n                                        repository={props.repository}\r\n                                        proMainContext={proMain}\r\n                                        messenger={props.messenger}\r\n                                        settings={props.settings}\r\n                                        scoreTree={props.scoreTree}\r\n                                    />\r\n                                </li>\r\n                            </CSSTransition>\r\n\r\n                        ))}\r\n                    </TransitionGroup>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoreElement;","C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\dataModels\\Claim.ts",[],"C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\EditorElement.tsx",[],"C:\\NotBackedUp\\GitHub\\Reason Score\\editor\\src\\dataModels\\ClaimEdge.ts",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":229,"column":13,"nodeType":"49","messageId":"50","endLine":229,"endColumn":38},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"@typescript-eslint/no-unused-vars","'fractionalizedScoreNumber' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]